#pragma once

// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.

/////////////////////////////////////////////////////////////////////////////
// CGetdatactrl1 wrapper class

class CGetdatactrl1 : public CWnd
{
protected:
	DECLARE_DYNCREATE(CGetdatactrl1)
public:
	CLSID const& GetClsid()
	{
		static CLSID const clsid
			= { 0x43555BB9, 0x3FE0, 0x11D6, { 0x9F, 0x4A, 0x0, 0xA0, 0xCC, 0x40, 0xA4, 0xD2 } };
		return clsid;
	}
	virtual BOOL Create(LPCTSTR lpszClassName, LPCTSTR lpszWindowName, DWORD dwStyle,
						const RECT& rect, CWnd* pParentWnd, UINT nID, 
						CCreateContext* pContext = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID); 
	}

    BOOL Create(LPCTSTR lpszWindowName, DWORD dwStyle, const RECT& rect, CWnd* pParentWnd, 
				UINT nID, CFile* pPersist = NULL, BOOL bStorage = FALSE,
				BSTR bstrLicKey = NULL)
	{ 
		return CreateControl(GetClsid(), lpszWindowName, dwStyle, rect, pParentWnd, nID,
		pPersist, bStorage, bstrLicKey); 
	}

// Attributes
public:


// Operations
public:

// _DGetData

// Functions
//

	CString GetLastError()
	{
		CString result;
		InvokeHelper(0x34, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL OpenBeamScopeP7(long Identity_HWND, long WhichBoard)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x35, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Identity_HWND, WhichBoard);
		return result;
	}
	BOOL IsBeamScopeP7HeadThere()
	{
		BOOL result;
		InvokeHelper(0x36, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL DoSearch()
	{
		BOOL result;
		InvokeHelper(0x37, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL HomeP7Head()
	{
		BOOL result;
		InvokeHelper(0x38, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL BeamScopeScanControl(long NumberOfScans, long FirstSlitON, long SecondSlitOn)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x39, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, NumberOfScans, FirstSlitON, SecondSlitOn);
		return result;
	}
	BOOL SaveFile()
	{
		BOOL result;
		InvokeHelper(0x3a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL OpenFile()
	{
		BOOL result;
		InvokeHelper(0x3b, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL PreviousProfile()
	{
		BOOL result;
		InvokeHelper(0x3c, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL NextProfile()
	{
		BOOL result;
		InvokeHelper(0x3d, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SelectProfile()
	{
		BOOL result;
		InvokeHelper(0x3e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void PurgeAllData()
	{
		InvokeHelper(0x3f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	double GetOcxResult(short IndexToValue)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x40, DISPATCH_METHOD, VT_R8, (void*)&result, parms, IndexToValue);
		return result;
	}
	CString GetOcxResultName(short IndexToValue)
	{
		CString result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x41, DISPATCH_METHOD, VT_BSTR, (void*)&result, parms, IndexToValue);
		return result;
	}
	BOOL OpenClipLevelDlg(short ClipOneOrTwo_0_1)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x42, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ClipOneOrTwo_0_1);
		return result;
	}
	double GetClipLevel(short ClipOneOrTwo_0_1)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x43, DISPATCH_METHOD, VT_R8, (void*)&result, parms, ClipOneOrTwo_0_1);
		return result;
	}
	short GetClipLevelMode(short ClipOneOrTwo_0_1)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x44, DISPATCH_METHOD, VT_I2, (void*)&result, parms, ClipOneOrTwo_0_1);
		return result;
	}
	long OpenPciCard(long BoardNumber, long TypeBoard, long VenderID, short DeviceID)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I2 ;
		InvokeHelper(0x45, DISPATCH_METHOD, VT_I4, (void*)&result, parms, BoardNumber, TypeBoard, VenderID, DeviceID);
		return result;
	}
	long GetFirmwareRevInfo(long BoardID, long Index)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x46, DISPATCH_METHOD, VT_I4, (void*)&result, parms, BoardID, Index);
		return result;
	}
	void LoadDefaults()
	{
		InvokeHelper(0x47, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetBeamScopeIndex()
	{
		long result;
		InvokeHelper(0x48, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetBeamScopeState()
	{
		long result;
		InvokeHelper(0x49, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetAverageNumber(long NumberToAverage)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x4a, DISPATCH_METHOD, VT_I4, (void*)&result, parms, NumberToAverage);
		return result;
	}
	long SaveJobFile()
	{
		long result;
		InvokeHelper(0x4b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long LoadJobFile()
	{
		long result;
		InvokeHelper(0x4c, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL FingerToPosition(double Position)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x4d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Position);
		return result;
	}
	long HowManyBoardsOpened()
	{
		long result;
		InvokeHelper(0x4e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetAverage(long NumberToAverage, long Reset, long ResetAtMircons)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0x4f, DISPATCH_METHOD, VT_I4, (void*)&result, parms, NumberToAverage, Reset, ResetAtMircons);
		return result;
	}
	BOOL SetClipLevel(double Clip1, double Clip2, short Mode1, short Mode2)
	{
		BOOL result;
		static BYTE parms[] = VTS_R8 VTS_R8 VTS_I2 VTS_I2 ;
		InvokeHelper(0x50, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Clip1, Clip2, Mode1, Mode2);
		return result;
	}
	BOOL SetDisplayMode(short DisplayMode)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x51, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, DisplayMode);
		return result;
	}
	CString GetOcxRev()
	{
		CString result;
		InvokeHelper(0x52, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL SetControlState(short WhichControl, short State_0_NOT0)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x53, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, WhichControl, State_0_NOT0);
		return result;
	}
	void Update()
	{
		InvokeHelper(0x54, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	BOOL OpenBeamMap(short WhichBoard)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x55, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, WhichBoard);
		return result;
	}
	short SetCurrentDevice(short DeviceType)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x56, DISPATCH_METHOD, VT_I2, (void*)&result, parms, DeviceType);
		return result;
	}
	long OpenThisFile(LPCTSTR NameOfFile)
	{
		long result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x57, DISPATCH_METHOD, VT_I4, (void*)&result, parms, NameOfFile);
		return result;
	}
	short GetCurrentDevice()
	{
		short result;
		InvokeHelper(0x58, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCurrentState()
	{
		short result;
		InvokeHelper(0x59, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetCurrentIndex()
	{
		short result;
		InvokeHelper(0x5a, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	BOOL SetLiveRecallState(short NewState_0_IS_LIVE)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x5b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, NewState_0_IS_LIVE);
		return result;
	}
	short GetSampleCount(short Live_Is_0)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x5c, DISPATCH_METHOD, VT_I2, (void*)&result, parms, Live_Is_0);
		return result;
	}
	CString GetRecallFieName()
	{
		CString result;
		InvokeHelper(0x5d, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long GetSavedDataPointer()
	{
		long result;
		InvokeHelper(0x5e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	short OpenDialog(short IndexToDialog)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x5f, DISPATCH_METHOD, VT_I2, (void*)&result, parms, IndexToDialog);
		return result;
	}
	short CloseDialog(short IndexToDialog)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x60, DISPATCH_METHOD, VT_I2, (void*)&result, parms, IndexToDialog);
		return result;
	}
	BOOL DeviceRunning()
	{
		BOOL result;
		InvokeHelper(0x61, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL StartDevice()
	{
		BOOL result;
		InvokeHelper(0x62, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL StopDevice()
	{
		BOOL result;
		InvokeHelper(0x63, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	short GetAverageNumber()
	{
		short result;
		InvokeHelper(0x64, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	CString GetRecallFieVersion()
	{
		CString result;
		InvokeHelper(0x65, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	BOOL OpenWinCamD(short WhichBoard)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x66, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, WhichBoard);
		return result;
	}
	short SetToZero()
	{
		short result;
		InvokeHelper(0x67, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short SetToAbsolute()
	{
		short result;
		InvokeHelper(0x68, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	short GetHorizontalPixels()
	{
		short result;
		InvokeHelper(0x69, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	BOOL CaptureIsFullResolution()
	{
		BOOL result;
		InvokeHelper(0x6a, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL IsCameraThere(short WhichCamera_0_1)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x6b, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, WhichCamera_0_1);
		return result;
	}
	CString GetHelpString()
	{
		CString result;
		InvokeHelper(0x6c, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	void FindWinCamImage()
	{
		InvokeHelper(0x6d, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void GetWinCamSingle()
	{
		InvokeHelper(0x6e, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetShutterSetting()
	{
		long result;
		InvokeHelper(0x6f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void ExportToPaint(long ThiPointer)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x70, DISPATCH_METHOD, VT_EMPTY, NULL, parms, ThiPointer);
	}
	short ToggleDialog(short IndexOfDialog)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x71, DISPATCH_METHOD, VT_I2, (void*)&result, parms, IndexOfDialog);
		return result;
	}
	BOOL ExportAsBitMap(long ThisAsLong)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x72, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ThisAsLong);
		return result;
	}
	BOOL PutToClipboard(long ThisAsLong)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x73, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ThisAsLong);
		return result;
	}
	CString GetSoftwareVersion()
	{
		CString result;
		InvokeHelper(0x74, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	double GetWinCamDPixelSize(short X_0_Y_1)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x75, DISPATCH_METHOD, VT_R8, (void*)&result, parms, X_0_Y_1);
		return result;
	}
	double GetParameter(short IndexToValue)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x76, DISPATCH_METHOD, VT_R8, (void*)&result, parms, IndexToValue);
		return result;
	}
	BOOL StartDriver()
	{
		BOOL result;
		InvokeHelper(0x77, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void ResetCameras()
	{
		InvokeHelper(0x78, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	short ResetCamera(short WhichCamera)
	{
		short result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x79, DISPATCH_METHOD, VT_I2, (void*)&result, parms, WhichCamera);
		return result;
	}
	CString GetSaveFileName()
	{
		CString result;
		InvokeHelper(0x7a, DISPATCH_METHOD, VT_BSTR, (void*)&result, NULL);
		return result;
	}
	long GetProfileTop()
	{
		long result;
		InvokeHelper(0x7b, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	double GetOcxResultExt(long WhichResult, long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x7c, DISPATCH_METHOD, VT_R8, (void*)&result, parms, WhichResult, WhichCamera);
		return result;
	}
	BOOL IsDataReady(short Index)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0x7d, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Index);
		return result;
	}
	double get_PersistantData(short Index)
	{
		double result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xc2, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, Index);
		return result;
	}
	void put_PersistantData(short Index, double newValue)
	{
		static BYTE parms[] = VTS_I2 VTS_R8 ;
		InvokeHelper(0xc2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, Index, newValue);
	}
	long GetWinCamTraps()
	{
		long result;
		InvokeHelper(0x7e, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	void ForceCrosshairsToZero()
	{
		InvokeHelper(0x7f, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void ForceCrosshairsTo45()
	{
		InvokeHelper(0x80, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void SetGamma(double NewGamma)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x81, DISPATCH_METHOD, VT_EMPTY, NULL, parms, NewGamma);
	}
	void EnableEffectiveCentroidsY()
	{
		InvokeHelper(0x82, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void EnableEffectiveCentroidsX()
	{
		InvokeHelper(0x83, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableEffectiveCentroidsY()
	{
		InvokeHelper(0x84, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	void DisableEffectiveCentroidsX()
	{
		InvokeHelper(0x85, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	double GetEffectiveCentroidY(long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x86, DISPATCH_METHOD, VT_R8, (void*)&result, parms, WhichCamera);
		return result;
	}
	double GetEffectiveCentroidX(long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x87, DISPATCH_METHOD, VT_R8, (void*)&result, parms, WhichCamera);
		return result;
	}
	double GetEffectiveGeoCenterY(long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x88, DISPATCH_METHOD, VT_R8, (void*)&result, parms, WhichCamera);
		return result;
	}
	double GetEffectiveGeoCenterX(long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x89, DISPATCH_METHOD, VT_R8, (void*)&result, parms, WhichCamera);
		return result;
	}
	double get_Exposure(long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc3, DISPATCH_PROPERTYGET, VT_R8, (void*)&result, parms, WhichCamera);
		return result;
	}
	void put_Exposure(long WhichCamera, double newValue)
	{
		static BYTE parms[] = VTS_I4 VTS_R8 ;
		InvokeHelper(0xc3, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms, WhichCamera, newValue);
	}
	void KeyEvent(short KeyCode, short KeyCount)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0x8a, DISPATCH_METHOD, VT_EMPTY, NULL, parms, KeyCode, KeyCount);
	}
	long GetPixel(long x, long y)
	{
		long result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0x8b, DISPATCH_METHOD, VT_I4, (void*)&result, parms, x, y);
		return result;
	}
	BOOL SaveCurrentData(LPCTSTR FileNameAndPath)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0x8c, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, FileNameAndPath);
		return result;
	}
	long EnableUseEffectiveSlits(long Enable)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x8d, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Enable);
		return result;
	}
	BOOL IsHeadRotationFixed()
	{
		BOOL result;
		InvokeHelper(0x8e, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void SetHeadRotationAsFixed(long HeadRotationFixed_0_1)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x8f, DISPATCH_METHOD, VT_EMPTY, NULL, parms, HeadRotationFixed_0_1);
	}
	void SetHeadAngle(double AngleInRadians)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x90, DISPATCH_METHOD, VT_EMPTY, NULL, parms, AngleInRadians);
	}
	BOOL IsHeadStalled()
	{
		BOOL result;
		InvokeHelper(0x91, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	double GetHeadAngle()
	{
		double result;
		InvokeHelper(0x92, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
		return result;
	}
	BOOL GetErrorStatus()
	{
		BOOL result;
		InvokeHelper(0x93, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	void UpdateAllButtons()
	{
		InvokeHelper(0x94, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetPeakXlocation()
	{
		long result;
		InvokeHelper(0x95, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetPeakYlocation()
	{
		long result;
		InvokeHelper(0x96, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetCentroidXlocation()
	{
		long result;
		InvokeHelper(0x97, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetCentroidYlocation()
	{
		long result;
		InvokeHelper(0x98, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetDefaultXcPlane(long DefaultXcPlane)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x99, DISPATCH_METHOD, VT_I4, (void*)&result, parms, DefaultXcPlane);
		return result;
	}
	double SetEffectiveWidthCliplevel(double NewClipLevel)
	{
		double result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0x9a, DISPATCH_METHOD, VT_R8, (void*)&result, parms, NewClipLevel);
		return result;
	}
	double GetEffectiveWidthCliplevel()
	{
		double result;
		InvokeHelper(0x9b, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
		return result;
	}
	long SetRealTimeLogging(long EnabledIsNotZero)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9c, DISPATCH_METHOD, VT_I4, (void*)&result, parms, EnabledIsNotZero);
		return result;
	}
	long GetRealTimeLogging()
	{
		long result;
		InvokeHelper(0x9d, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long SetNonunifomrityOnOff(long NonZeroIsOn)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0x9e, DISPATCH_METHOD, VT_I4, (void*)&result, parms, NonZeroIsOn);
		return result;
	}
	long GetNonunifomrityOnOff()
	{
		long result;
		InvokeHelper(0x9f, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL GetCurrentWinCamData(long * ImageDataPt, long * XSizePt, long * YSizePtr)
	{
		BOOL result;
		static BYTE parms[] = VTS_PI4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xa0, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, ImageDataPt, XSizePt, YSizePtr);
		return result;
	}
	BOOL SetROI(long Left, long Top, long Width, long Height)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 VTS_I4 VTS_I4 ;
		InvokeHelper(0xa1, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Left, Top, Width, Height);
		return result;
	}
	BOOL GetROI(long * LeftAsLongPointer, long * TopAsLongPointer, long * WidthAsLongPointer, long * HeightAsLongPointer)
	{
		BOOL result;
		static BYTE parms[] = VTS_PI4 VTS_PI4 VTS_PI4 VTS_PI4 ;
		InvokeHelper(0xa2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, LeftAsLongPointer, TopAsLongPointer, WidthAsLongPointer, HeightAsLongPointer);
		return result;
	}
	BOOL ToggleAnimation()
	{
		BOOL result;
		InvokeHelper(0xa3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL SetWorkingDirectory(LPCTSTR WorkingDirectory)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xa4, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, WorkingDirectory);
		return result;
	}
	BOOL LoadThisJobFile(LPCTSTR JobFileNamePath)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xa5, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, JobFileNamePath);
		return result;
	}
	double GetIncludedPowerPercentAtRadius(double RadiusInMicrons)
	{
		double result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xa6, DISPATCH_METHOD, VT_R8, (void*)&result, parms, RadiusInMicrons);
		return result;
	}
	double GetIncludedPowerTotal()
	{
		double result;
		InvokeHelper(0xa7, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
		return result;
	}
	BOOL SaveCurrentDataBuffer(LPCTSTR NameOfFileWithPath)
	{
		BOOL result;
		static BYTE parms[] = VTS_BSTR ;
		InvokeHelper(0xa8, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, NameOfFileWithPath);
		return result;
	}
	BOOL GetWinCamSingleAndComplete()
	{
		BOOL result;
		InvokeHelper(0xa9, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	double GetRadiusAtPowerPercent(double PowerPercent)
	{
		double result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xaa, DISPATCH_METHOD, VT_R8, (void*)&result, parms, PowerPercent);
		return result;
	}
	void AutoCrosshairs()
	{
		InvokeHelper(0xab, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetCameraType()
	{
		long result;
		InvokeHelper(0xac, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	BOOL PressButton(long Button_ID, long Left_Button)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xad, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Button_ID, Left_Button);
		return result;
	}
	BOOL StartBeamScopeM2()
	{
		BOOL result;
		InvokeHelper(0xc0, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	BOOL StopBeamScopeM2()
	{
		BOOL result;
		InvokeHelper(0xc8, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	double BeamScopeSetStagePosition(double NewPositionInMicrons)
	{
		double result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb0, DISPATCH_METHOD, VT_R8, (void*)&result, parms, NewPositionInMicrons);
		return result;
	}
	double BeamScopeSetM2StartPosition(double StartPositionInMicons)
	{
		double result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xb1, DISPATCH_METHOD, VT_R8, (void*)&result, parms, StartPositionInMicons);
		return result;
	}
	BOOL BeamScopeSetM2StoptPosition(short StopPositionInMicrons)
	{
		BOOL result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb2, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, StopPositionInMicrons);
		return result;
	}
	BOOL BeamScopeM2HomeStage()
	{
		BOOL result;
		InvokeHelper(0xb3, DISPATCH_METHOD, VT_BOOL, (void*)&result, NULL);
		return result;
	}
	double GetWinCamGain(long WhichCamera)
	{
		double result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xb4, DISPATCH_METHOD, VT_R8, (void*)&result, parms, WhichCamera);
		return result;
	}
	void SetBackGroundSubtraction2(short New_Remove, short Silent)
	{
		static BYTE parms[] = VTS_I2 VTS_I2 ;
		InvokeHelper(0xb5, DISPATCH_METHOD, VT_EMPTY, NULL, parms, New_Remove, Silent);
	}
	void RestartMotor()
	{
		InvokeHelper(0xb6, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
	}
	long GetCameraIndex()
	{
		long result;
		InvokeHelper(0xb7, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long GetBeamScopeHeadType()
	{
		long result;
		InvokeHelper(0xb8, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	long RotateCamera(short Rotate)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xb9, DISPATCH_METHOD, VT_I4, (void*)&result, parms, Rotate);
		return result;
	}
	void NudgeCrosshairs(long Axis_X_Y, long SignedDirection)
	{
		static BYTE parms[] = VTS_I4 VTS_I4 ;
		InvokeHelper(0xba, DISPATCH_METHOD, VT_EMPTY, NULL, parms, Axis_X_Y, SignedDirection);
	}
	BOOL EnableInclusion(long Enable_Yes_No)
	{
		BOOL result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xbb, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms, Enable_Yes_No);
		return result;
	}
	short GetVerticalPixels()
	{
		short result;
		InvokeHelper(0xbc, DISPATCH_METHOD, VT_I2, (void*)&result, NULL);
		return result;
	}
	void AddKey(long KeyNumber)
	{
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xbd, DISPATCH_METHOD, VT_EMPTY, NULL, parms, KeyNumber);
	}
	long CameraType()
	{
		long result;
		InvokeHelper(0xbe, DISPATCH_METHOD, VT_I4, (void*)&result, NULL);
		return result;
	}
	double SetAlconTarget(double AlconTarget)
	{
		double result;
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xbf, DISPATCH_METHOD, VT_R8, (void*)&result, parms, AlconTarget);
		return result;
	}
	long SetNumberOfCameras(short NumberOfCameras)
	{
		long result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xc5, DISPATCH_METHOD, VT_I4, (void*)&result, parms, NumberOfCameras);
		return result;
	}
	long AlconAutoConvergeEnable(long EnableTrueFalse)
	{
		long result;
		static BYTE parms[] = VTS_I4 ;
		InvokeHelper(0xc6, DISPATCH_METHOD, VT_I4, (void*)&result, parms, EnableTrueFalse);
		return result;
	}
	VARIANT GetWinCamDataAsVariant()
	{
		VARIANT result;
		InvokeHelper(0xc9, DISPATCH_METHOD, VT_VARIANT, (void*)&result, NULL);
		return result;
	}
	double GetVSKOffset()
	{
		double result;
		InvokeHelper(0xca, DISPATCH_METHOD, VT_R8, (void*)&result, NULL);
		return result;
	}
	void SetVSKOffset(double newValue)
	{
		static BYTE parms[] = VTS_R8 ;
		InvokeHelper(0xcb, DISPATCH_METHOD, VT_EMPTY, NULL, parms, newValue);
	}
	VARIANT GetTargetWinCamDataAsVariant(short targetCamera)
	{
		VARIANT result;
		static BYTE parms[] = VTS_I2 ;
		InvokeHelper(0xcc, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms, targetCamera);
		return result;
	}
	double GetClipWidthAtAngle(double angle, double clipLevel)
	{
		double result;
		static BYTE parms[] = VTS_R8 VTS_R8 ;
		InvokeHelper(0xcd, DISPATCH_METHOD, VT_R8, (void*)&result, parms, angle, clipLevel);
		return result;
	}

// Properties
//

double GetFilterValue()
{
	double result;
	GetProperty(0x1, VT_R8, (void*)&result);
	return result;
}
void SetFilterValue(double propVal)
{
	SetProperty(0x1, VT_R8, propVal);
}
long GetIsMSquaredOpen()
{
	long result;
	GetProperty(0x2, VT_I4, (void*)&result);
	return result;
}
void SetIsMSquaredOpen(long propVal)
{
	SetProperty(0x2, VT_I4, propVal);
}
short GetPalette()
{
	short result;
	GetProperty(0x3, VT_I2, (void*)&result);
	return result;
}
void SetPalette(short propVal)
{
	SetProperty(0x3, VT_I2, propVal);
}
CString GetPrintNotes()
{
	CString result;
	GetProperty(0x4, VT_BSTR, (void*)&result);
	return result;
}
void SetPrintNotes(CString propVal)
{
	SetProperty(0x4, VT_BSTR, propVal);
}
short GetInkSaverState()
{
	short result;
	GetProperty(0x5, VT_I2, (void*)&result);
	return result;
}
void SetInkSaverState(short propVal)
{
	SetProperty(0x5, VT_I2, propVal);
}
short GetJitterSuppression()
{
	short result;
	GetProperty(0x6, VT_I2, (void*)&result);
	return result;
}
void SetJitterSuppression(short propVal)
{
	SetProperty(0x6, VT_I2, propVal);
}
long GetSlitsUsed()
{
	long result;
	GetProperty(0x7, VT_I4, (void*)&result);
	return result;
}
void SetSlitsUsed(long propVal)
{
	SetProperty(0x7, VT_I4, propVal);
}
double GetWavelength()
{
	double result;
	GetProperty(0x8, VT_R8, (void*)&result);
	return result;
}
void SetWavelength(double propVal)
{
	SetProperty(0x8, VT_R8, propVal);
}
short GetIsDivergenceOpen()
{
	short result;
	GetProperty(0x9, VT_I2, (void*)&result);
	return result;
}
void SetIsDivergenceOpen(short propVal)
{
	SetProperty(0x9, VT_I2, propVal);
}
short GetWinCamFilter()
{
	short result;
	GetProperty(0xa, VT_I2, (void*)&result);
	return result;
}
void SetWinCamFilter(short propVal)
{
	SetProperty(0xa, VT_I2, propVal);
}
short GetFastUpdate()
{
	short result;
	GetProperty(0xb, VT_I2, (void*)&result);
	return result;
}
void SetFastUpdate(short propVal)
{
	SetProperty(0xb, VT_I2, propVal);
}
short GetCameraSelect()
{
	short result;
	GetProperty(0xc, VT_I2, (void*)&result);
	return result;
}
void SetCameraSelect(short propVal)
{
	SetProperty(0xc, VT_I2, propVal);
}
short GetCurrentCamera()
{
	short result;
	GetProperty(0xd, VT_I2, (void*)&result);
	return result;
}
void SetCurrentCamera(short propVal)
{
	SetProperty(0xd, VT_I2, propVal);
}
short GetAutoSnap()
{
	short result;
	GetProperty(0xe, VT_I2, (void*)&result);
	return result;
}
void SetAutoSnap(short propVal)
{
	SetProperty(0xe, VT_I2, propVal);
}
short GetSizeToggle()
{
	short result;
	GetProperty(0xf, VT_I2, (void*)&result);
	return result;
}
void SetSizeToggle(short propVal)
{
	SetProperty(0xf, VT_I2, propVal);
}
short GetBaselineLocked()
{
	short result;
	GetProperty(0x10, VT_I2, (void*)&result);
	return result;
}
void SetBaselineLocked(short propVal)
{
	SetProperty(0x10, VT_I2, propVal);
}
short GetWinCamNormalized()
{
	short result;
	GetProperty(0x11, VT_I2, (void*)&result);
	return result;
}
void SetWinCamNormalized(short propVal)
{
	SetProperty(0x11, VT_I2, propVal);
}
short GetBackGroundSubtraction()
{
	short result;
	GetProperty(0x12, VT_I2, (void*)&result);
	return result;
}
void SetBackGroundSubtraction(short propVal)
{
	SetProperty(0x12, VT_I2, propVal);
}
short GetAutoNaming()
{
	short result;
	GetProperty(0x13, VT_I2, (void*)&result);
	return result;
}
void SetAutoNaming(short propVal)
{
	SetProperty(0x13, VT_I2, propVal);
}
long GetCustomSetup()
{
	long result;
	GetProperty(0x14, VT_I4, (void*)&result);
	return result;
}
void SetCustomSetup(long propVal)
{
	SetProperty(0x14, VT_I4, propVal);
}
double GetCentroidClipLevel()
{
	double result;
	GetProperty(0x15, VT_R8, (void*)&result);
	return result;
}
void SetCentroidClipLevel(double propVal)
{
	SetProperty(0x15, VT_R8, propVal);
}
long GetCameraSequence()
{
	long result;
	GetProperty(0x16, VT_I4, (void*)&result);
	return result;
}
void SetCameraSequence(long propVal)
{
	SetProperty(0x16, VT_I4, propVal);
}
double GetGeoClipLevel()
{
	double result;
	GetProperty(0x17, VT_R8, (void*)&result);
	return result;
}
void SetGeoClipLevel(double propVal)
{
	SetProperty(0x17, VT_R8, propVal);
}
long GetEffectiveCentroidFilterInPixels()
{
	long result;
	GetProperty(0x18, VT_I4, (void*)&result);
	return result;
}
void SetEffectiveCentroidFilterInPixels(long propVal)
{
	SetProperty(0x18, VT_I4, propVal);
}
BOOL GeteTrapOn()
{
	BOOL result;
	GetProperty(0x19, VT_BOOL, (void*)&result);
	return result;
}
void SeteTrapOn(BOOL propVal)
{
	SetProperty(0x19, VT_BOOL, propVal);
}
BOOL GetAutoShutterOn()
{
	BOOL result;
	GetProperty(0x1a, VT_BOOL, (void*)&result);
	return result;
}
void SetAutoShutterOn(BOOL propVal)
{
	SetProperty(0x1a, VT_BOOL, propVal);
}
BOOL GetUseISO11146()
{
	BOOL result;
	GetProperty(0x1b, VT_BOOL, (void*)&result);
	return result;
}
void SetUseISO11146(BOOL propVal)
{
	SetProperty(0x1b, VT_BOOL, propVal);
}
BOOL GetRangeLock()
{
	BOOL result;
	GetProperty(0x1c, VT_BOOL, (void*)&result);
	return result;
}
void SetRangeLock(BOOL propVal)
{
	SetProperty(0x1c, VT_BOOL, propVal);
}
BOOL GetLockAll()
{
	BOOL result;
	GetProperty(0x1d, VT_BOOL, (void*)&result);
	return result;
}
void SetLockAll(BOOL propVal)
{
	SetProperty(0x1d, VT_BOOL, propVal);
}
BOOL GetStopMotorAtExit()
{
	BOOL result;
	GetProperty(0x1e, VT_BOOL, (void*)&result);
	return result;
}
void SetStopMotorAtExit(BOOL propVal)
{
	SetProperty(0x1e, VT_BOOL, propVal);
}
BOOL GetUseEffectiveSlits()
{
	BOOL result;
	GetProperty(0x1f, VT_BOOL, (void*)&result);
	return result;
}
void SetUseEffectiveSlits(BOOL propVal)
{
	SetProperty(0x1f, VT_BOOL, propVal);
}
BOOL GetShowEffectiveSlits()
{
	BOOL result;
	GetProperty(0x20, VT_BOOL, (void*)&result);
	return result;
}
void SetShowEffectiveSlits(BOOL propVal)
{
	SetProperty(0x20, VT_BOOL, propVal);
}
BOOL GetAtAim()
{
	BOOL result;
	GetProperty(0x21, VT_BOOL, (void*)&result);
	return result;
}
void SetAtAim(BOOL propVal)
{
	SetProperty(0x21, VT_BOOL, propVal);
}
long GetBeamMapCdefaultXc()
{
	long result;
	GetProperty(0x22, VT_I4, (void*)&result);
	return result;
}
void SetBeamMapCdefaultXc(long propVal)
{
	SetProperty(0x22, VT_I4, propVal);
}
long GetWinCamDDivergenceCameras()
{
	long result;
	GetProperty(0x23, VT_I4, (void*)&result);
	return result;
}
void SetWinCamDDivergenceCameras(long propVal)
{
	SetProperty(0x23, VT_I4, propVal);
}
short GetCentroidType()
{
	short result;
	GetProperty(0x24, VT_I2, (void*)&result);
	return result;
}
void SetCentroidType(short propVal)
{
	SetProperty(0x24, VT_I2, propVal);
}
long GetDontUsePLS()
{
	long result;
	GetProperty(0x25, VT_I4, (void*)&result);
	return result;
}
void SetDontUsePLS(long propVal)
{
	SetProperty(0x25, VT_I4, propVal);
}
short GetUseAllUsbCameras()
{
	short result;
	GetProperty(0x26, VT_I2, (void*)&result);
	return result;
}
void SetUseAllUsbCameras(short propVal)
{
	SetProperty(0x26, VT_I2, propVal);
}
long GetAlternateDetector()
{
	long result;
	GetProperty(0x27, VT_I4, (void*)&result);
	return result;
}
void SetAlternateDetector(long propVal)
{
	SetProperty(0x27, VT_I4, propVal);
}
BOOL GetUseD63()
{
	BOOL result;
	GetProperty(0x28, VT_BOOL, (void*)&result);
	return result;
}
void SetUseD63(BOOL propVal)
{
	SetProperty(0x28, VT_BOOL, propVal);
}
double GetImagerGain()
{
	double result;
	GetProperty(0x29, VT_R8, (void*)&result);
	return result;
}
void SetImagerGain(double propVal)
{
	SetProperty(0x29, VT_R8, propVal);
}
short GetMajorMinorMethod()
{
	short result;
	GetProperty(0x2a, VT_I2, (void*)&result);
	return result;
}
void SetMajorMinorMethod(short propVal)
{
	SetProperty(0x2a, VT_I2, propVal);
}
BOOL GetTriggerEnabled()
{
	BOOL result;
	GetProperty(0x2b, VT_BOOL, (void*)&result);
	return result;
}
void SetTriggerEnabled(BOOL propVal)
{
	SetProperty(0x2b, VT_BOOL, propVal);
}
BOOL GetWinCamDAutoTrigger()
{
	BOOL result;
	GetProperty(0x2c, VT_BOOL, (void*)&result);
	return result;
}
void SetWinCamDAutoTrigger(BOOL propVal)
{
	SetProperty(0x2c, VT_BOOL, propVal);
}
BOOL GetTriggerIsInput()
{
	BOOL result;
	GetProperty(0x2d, VT_BOOL, (void*)&result);
	return result;
}
void SetTriggerIsInput(BOOL propVal)
{
	SetProperty(0x2d, VT_BOOL, propVal);
}
BOOL GetTriggerOnPositive()
{
	BOOL result;
	GetProperty(0x2e, VT_BOOL, (void*)&result);
	return result;
}
void SetTriggerOnPositive(BOOL propVal)
{
	SetProperty(0x2e, VT_BOOL, propVal);
}
double GetAutoTrigMax()
{
	double result;
	GetProperty(0x2f, VT_R8, (void*)&result);
	return result;
}
void SetAutoTrigMax(double propVal)
{
	SetProperty(0x2f, VT_R8, propVal);
}
double GetAutoTrigMin()
{
	double result;
	GetProperty(0x30, VT_R8, (void*)&result);
	return result;
}
void SetAutoTrigMin(double propVal)
{
	SetProperty(0x30, VT_R8, propVal);
}
BOOL GetEnableMultiBeams()
{
	BOOL result;
	GetProperty(0x31, VT_BOOL, (void*)&result);
	return result;
}
void SetEnableMultiBeams(BOOL propVal)
{
	SetProperty(0x31, VT_BOOL, propVal);
}
BOOL GetEnableCTE()
{
	BOOL result;
	GetProperty(0x32, VT_BOOL, (void*)&result);
	return result;
}
void SetEnableCTE(BOOL propVal)
{
	SetProperty(0x32, VT_BOOL, propVal);
}
double GetDoubleAlconRo()
{
	double result;
	GetProperty(0x33, VT_R8, (void*)&result);
	return result;
}
void SetDoubleAlconRo(double propVal)
{
	SetProperty(0x33, VT_R8, propVal);
}


};
